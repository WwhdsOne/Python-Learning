"""
设计模式是一种编程套路,可以极大的方便程序的开发。
最常见、最经典的设计模式,就是我们所学习的面向对象了。
除了面向对象外,在编程中也有很多既定的套路可以方便开发,我们称之为设计模式：
- 单例、工厂模式
- 建造者、责任链、状态、备忘录、解释器、访问者、观察者、中介、模板、代理模式
- 等等模式
"""

# 单例模式
class Tool:
    pass
t1 = Tool()
t2 = Tool()
print(t1) # 输出 <__main__.Tool object at 0x00000284D5D5BB90>
print(t2) # 输出 <__main__.Tool object at 0x00000284D5D5BBD0>
"""
通过print语句可以看出,它们的内存地址是不相同的,即t1和t2是完全独立的两个对象。
某些场景下, 我们需要一个类无论获取多少次类对象,都仅仅提供一个具体的实例
用以节省创建类对象的开销和内存开销
比如某些工具类,仅需要1个实例,即可在各处使用
这就是单例模式所要实现的效果。
"""
# 这不就是java的单例模式(Bean)吗？
"""
单例模式（Singleton Pattern）是一种常用的软件设计模式，该模式的主要目的是确保某一个类只有一个实例存在。
在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。
定义: 保证一个类只有一个实例,并提供一个访问它的全局访问点
适用场景:当一个类只能有一个实例，而客户可以从一个众所周知的访问点访问它时。
"""
import 单例模式示例
s1 = 单例模式示例.str_tool
s2 = 单例模式示例.str_tool
print(s1) # 输出 <__main__.StrTools object at 0x000001F9AD28BA50>
print(s2) # 输出 <__main__.StrTools object at 0x000001F9AD28BA50>



